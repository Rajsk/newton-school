#Simple-Transpose
import java.io.*; // for handling input/output..
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main(String[] args) {
        // Your code here
        Scanner kb = new Scanner(System.in);
        int n = kb.nextInt();
        int arr[][] = new int[n][n];
        int brr[][] = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                arr[i][j] = kb.nextInt();
                brr[j][i] = arr[i][j];
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(brr[i][j] + " ");
            }
            System.out.println();
        }
    }
}
#Divisors Of N
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
                      Scanner inputTaker = new Scanner(System.in);
                      int u = inputTaker.nextInt();
                      while(u>0){
                          int n= inputTaker.nextInt();
                          int count=0;
                          for(int x= 1;x<=Math.sqrt(n); x++){
                              if(n%x==0){
                                  if(x%2==0){
                                      count++;
                                  }
                                  if(x*x !=n){
                                      if((n/x)%2==0){
                                          count++;
                                      }
                                  }
                              }
                          }
                          System.out.println(count);
                          u--;
                      }
    }
}
#Prime Sum
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    static boolean checkPrime(int NumberToCheck){
        if(NumberToCheck==1){
            return false;
        }
        for(int i=2;i*i<=NumberToCheck;i++){
            if(NumberToCheck%i==0){
                return false;
            }
        }
        return true;

    }
    static int primeSum(int l,int r){
        int sum=0;
        for(int i=r;i>=l;i--){
            boolean isPrime=checkPrime(i);
            if(isPrime){
                int secondLastDigit=(i%100)/10;
                sum=sum+secondLastDigit;
            }
        }
        return sum;
    }
    public static void main (String[] args) {

                      Scanner sc=new Scanner(System.in);
                      int t=sc.nextInt();
                      while(t-->0){
                          int l=sc.nextInt();
                          int r=sc.nextInt();
                          System.out.println(primeSum(l,r));
                      }
    }
}
#Rotate the matrix
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
                      Scanner inputTaker = new Scanner(System.in);

        int n = inputTaker.nextInt();
        int[][] arr = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                arr[i][j] = inputTaker.nextInt();
            }
        }
        rotateAndPrint(arr, n);
        System.out.println("");
        rotateAndPrint(arr, n);
    }

    public static void rotateAndPrint(int[][] arr, int n) {
        for (int i = 0; i < n / 2; i++) {
            for (int j = i; j < n - i - 1; j++) {
                int temp = arr[i][j];
                arr[i][j] = arr[n - 1 - j][i];
                arr[n - 1 - j][i] = arr[n - 1 - i][n - 1 - j];
                arr[n - 1 - i][n - 1 - j] = arr[j][n - 1 - i];
                arr[j][n - 1 - i] = temp;
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(arr[i][j] + " ");
            }
            System.out.println("");
        }
    }
}
#Simple-Determinant
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
                      Scanner sc = new Scanner(System.in);
        int l = 2;
        int matrix[][] = new int[l][l];
        for (int i = 0; i < l; i++) {
            for (int j = 0; j < l; j++) {
                matrix[i][j] = sc.nextInt();
            }
        }
        int x, y, f;
        x = matrix[0][0] * matrix[1][1];
        y = matrix[0][1] * matrix[1][0];
        f = x - y;
        System.out.println(f);
    }
}
#Number of Primes - Easy Version
#include <bits/stdc++.h>
using namespace std;
bool isPrime(int n)
{
	if (n <= 1)
		return false;


	for (int i = 2; i < n; i++)
		if (n % i == 0)
			return false;

	return true;
}
int ppp=0;
void printPrime(int n)
{
	for (int i = 2; i <= n; i++) {
		if (isPrime(i))
			ppp++;
	}
    cout<<ppp<<endl;
    ppp=0;
}

int main()
{
    int t;
    cin>>t;

    while(t--){
    int n;cin>>n;
	printPrime(n);
    }
}
#Identity matrix
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
                      // Your code here
                      Scanner sc=new Scanner(System.in);
                      int n=sc.nextInt();
                      boolean flag=true;
                      int arr[][]=new int[n][n];
                      //input
                      for(int i=0;i<n;i++){
                          for(int j=0;j<n;j++){
                              arr[i][j]=sc.nextInt();
                                if(i==j && arr[i][j]!=1 ){
                                 flag= false;
                                 break;
                             }
                              if(i!=j && arr[i][j]!=0 ){
                                 flag= false;
                                 break;
                             }
                          }
                          }

                     if(flag){
                        System.out.println("Yes");
                         }else{
                      System.out.println("No");
                      }                              
    }
}
#A Boolean Matrix Problem
#include <bits/stdc++.h> 
///when you use java then use BufferedReader Class for input
using namespace std;
int32_t main() {
			int t;
			cin>>t;
			int row,col;
	
			for(int i=1;i<=t;i++)
			{
				cin>>row;
				cin>>col;
				int m[row][col];
				
				for(int k=0;k<row;k++)
				{
					for(int j=0;j<col;j++)
					{
						cin>>m[k][j];
					}
				}
				for(int k=0;k<row;k++)
				{
					for(int j=0;j<col;j++)
					{
						if(m[k][j]==1)
						{
							for(int h=0;h<col;h++)
							{
								m[k][h]=1;
							}
							break;	
						}
					}
				}	
				for(int k=0;k<row;k++)
				{
					for(int j=0;j<col;j++)
					{
						cout<<m[k][j]<<" ";
					}
					cout<<endl;
				}
			}			
	return 0;
}


