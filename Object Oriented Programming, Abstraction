Classes & Objects Manipulation
static class Student {
	String name;
	int rollNumber;
}

public static Student myFunction (String namea, int rollNumbera){
	Student obj= new Student();
	obj.name= namea;
	obj.rollNumber= rollNumbera;
	return obj;
}
Sum Calculator (OOPs)
class SumCalculator{
    public int num1, num2;
    SumCalculator(int _num1, int _num2){
        num1=_num1;
        num2=_num2;
    }
    public int sum(){
        return num1+num2;
    }
    public int sum2(int a, int b){
        return a+b;

    }
    public int fromObject(SumCalculator obj1, SumCalculator obj2){
        return obj1.sum()+obj2.sum();
    }

}
Bank Account
lass BankAccount{
    public int balance;
    public String name;
    BankAccount(int _balance,String _name){
        balance=_balance;
        name=_name;
    }
    public void depositFund(int fund){
        balance+=fund;
    }
    public boolean withdrawFund(int fund){
        if(fund<=balance){
            this.balance-=fund;
            return true;
        }
            return false;
    }
}
Vip Customer
class VipCustomer{
    public String email;
    public String name;
    public double creditLimit;
    VipCustomer(){
        this("XYZ",10.0,"xyz@abc.com");
    }
    VipCustomer(String name,double creditLimit){
        this(name,creditLimit,"xyz@abc.com");
    }
    VipCustomer(String _name,double _creditLimit,String _email){
        email=_email;
        name=_name;
        creditLimit=_creditLimit;
    }
    public String getName(){
        return this.name;
        
    }
    public String getEmail(){
        return this.email;
    }
    public double getCreditLimit(){
        return this.creditLimit;
    }
}
Field Area
class FieldArea{
    public double width,height;
    public FieldArea(){

    }
    public FieldArea(double width,double height){
        setWidth(width);
        setHeight(height);
    }
    public double getArea(){
        return this.width*this.height;
    }
    public double getWidth(){
        return this.width;
    }
    public double getHeight(){
        return this.height;
    }
    public void setWidth(double width){
        if(width<0){
            this.width=0;
        }
        else 
        this.width=width;
    }
    public void setHeight(double height){
        if(height<0){
            this.height=0;
        }
        else 
        this.height=height;
    }
}
Sort Array
class BubbleSort implements ISort{
    public int[] sort(int[] arr){
        int n = arr.length;
        int temp = 0;
        for(int i=0; i < n; i++){
            for(int j=1; j < (n-i); j++){
                if(arr[j-1] > arr[j]){
                    temp = arr[j-1];
                    arr[j-1] = arr[j];
                    arr[j] = temp;
                }

            }
        }
        return arr;
    }
}
class InsertionSort implements ISort{
    public int[] sort(int[] arr){
        int n = arr.length;
        for (int i = 1; i < n; ++i) {
            int key = arr[i];
            int j = i - 1;
            /* Move elements of arr[0..i-1], that are
               greater than key, to one position ahead
               of their current position */
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
        return  arr;
    }
}
class MergeSort implements ISort{
    void merge(int arr[], int l, int m, int r) {
        int n1 = m - l + 1;
        int n2 = r - m;
        int L[] = new int [n1];
        int R[] = new int [n2];
        for (int i=0; i<n1; ++i)
            L[i] = arr[l + i];
        for (int j=0; j<n2; ++j)
            R[j] = arr[m + 1+ j];
        int i = 0, j = 0;
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            }
            else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
    void sort(int arr[], int l, int r)
    {
        if (l < r) {
            int m = (l+r)/2;
            sort(arr, l, m);
            sort(arr , m+1, r);
            merge(arr, l, m, r);
        }
    }
    public int[] sort(int[] arr){
        int n=arr.length;
        sort(arr,0,n-1);
        return arr;
    }
}
class SelectionSort implements ISort{
    public int[] sort(int[] arr){
        for (int i = 0; i < arr.length - 1; i++) {
            int index = i;
            for (int j = i + 1; j < arr.length; j++){
                if (arr[j] < arr[index]){
                    index = j;//searching for lowest index
                }
            }
            int smallerNumber = arr[index];
            arr[index] = arr[i];
            arr[i] = smallerNumber;
        }
        return arr;
    }
}
Classes in Java
static class Student
{
    String name;
    int eng,maths,hindi;
}
static Student[] createStudentArray(int n)
    {
       Student st[]=new Student[n];
       for(int i=0;i<n;i++){
           st[i]=new Student();
           st[i].name=sc.next();
           st[i].eng=sc.nextInt();
           st[i].maths=sc.nextInt();
           st[i].hindi=sc.nextInt();

       }
       return st;
    }
    
    static int engAverage(Student st[], int n)
    {
        int sum=0;
        for(int i=0;i<n;i++){
            sum+=st[i].eng;
        }
        return sum/n;
    }
    
    static int avgPercentageOfClass(Student st[], int n)
    {
        int sum=0; int avg=0;
        for(int i=0;i<n;i++){
            sum=0;
            sum+=st[i].eng+st[i].maths+st[i].hindi;
            avg+=sum/3;
        }
        return avg/(n);

    }
    Shapes - Class Inheritance
import java.util.*;
abstract class Quadrilateral {
   double side1;
   double side2;
   double side3;
   double side4;
   public Quadrilateral(double side1, double side2, double side3, double side4) {
       this.side1 = side1;
       this.side2 = side2;
       this.side3 = side3;
       this.side4 = side4;
   }
   protected abstract double getArea();
   protected double getPerimeter() {
       return (side1+side2+side3+side4);
   }
}
// Implement class Parallelogram and methods getArea() and getPerimeter()
class Parallelogram extends Quadrilateral {
    //Write your code here
    double height;
    Parallelogram(double s1, double s2, double h){
        super(s1,s2,s1,s2);
        this.height=h;
    }
    public double getArea(){
        return side1*height;
    }
}
// Implement class Rhombus and methods getArea() and getPerimeter()
class Rhombus extends Parallelogram {
    //Write your code here
    double height;
    Rhombus(double s1, double h){
        super(s1,s1,h);
        this.height=h;
    }
}
//Implement class Rectangle and methods getArea() and getPerimeter()
class Rectangle extends Parallelogram {
    //Write your code here
    Rectangle(double s1, double s2){
        super(s1,s2,s2);
    }
}
//Implement class Square and methods getArea() and getPerimeter()
class Square extends Rhombus {
    //Write your code here
    Square(double s1){
        super(s1,s1);
    }
}
// Do not edit the Main class
class Main {
   public static void main(String[] args) {
       //Write your code here
        Scanner sc=new Scanner(System.in);
        double s1,s2,h;
        s1=sc.nextDouble();
        s2=sc.nextDouble();
        h=sc.nextDouble();
        double ss1,hs,rs1,rs2,sq1;
        ss1=sc.nextDouble();
        hs=sc.nextDouble();
        rs1=sc.nextDouble();
        rs2=sc.nextDouble();
        sq1=sc.nextDouble();
        if(s1<0 || s2<0 || h<0 || ss1<0 || hs<0 || rs1<0 || rs2<0 || sq1<0){
            System.out.println("Length of a side cannot be negative. Please Enter a positive integer");
        }
        else{
        Parallelogram parallelogram=new Parallelogram(s1,s2,h);
        Rhombus rhombus=new Rhombus(ss1,hs);
        Rectangle rectangle=new Rectangle(rs1,rs2);
        Square square=new Square(sq1);
        System.out.println("Perimeter of Parallelogram is " + parallelogram.getPerimeter() +" and Area of Parallelogram is " + parallelogram.getArea());
        System.out.println("Perimeter of Rhombus is " + rhombus.getPerimeter() +" and Area of Rhombus is " + rhombus.getArea());
        System.out.println("Perimeter of Rectangle is " + rectangle.getPerimeter() +" and Area of Rectangle is " + rectangle.getArea());
        System.out.println("Perimeter of Square is " + square.getPerimeter()+ " and Area of Square is " + square.getArea());
        }
        sc.close();
   }
}
